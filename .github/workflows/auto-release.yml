name: Auto Release

on:
  push:
    branches:
      - main

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install python-semantic-release

      - name: Get current version
        id: get_version
        run: |
          CURRENT_VERSION=$(grep '__version__ = ' crules/crules/__init__.py | cut -d'"' -f2)
          echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT

      - name: Determine version bump
        id: bump_version
        run: |
          COMMITS=$(git log --format=%B v${{ steps.get_version.outputs.current_version }}..HEAD)
          if echo "$COMMITS" | grep -q "BREAKING CHANGE"; then
            echo "bump=major" >> $GITHUB_OUTPUT
          elif echo "$COMMITS" | grep -q "^feat:"; then
            echo "bump=minor" >> $GITHUB_OUTPUT
          elif echo "$COMMITS" | grep -q "^fix:"; then
            echo "bump=patch" >> $GITHUB_OUTPUT
          else
            echo "bump=none" >> $GITHUB_OUTPUT
          fi

      - name: Calculate new version
        id: new_version
        run: |
          CURRENT=${{ steps.get_version.outputs.current_version }}
          BUMP=${{ steps.bump_version.outputs.bump }}
          if [ "$BUMP" = "none" ]; then
            echo "new_version=$CURRENT" >> $GITHUB_OUTPUT
          else
            IFS='.' read -r major minor patch <<< "$CURRENT"
            case $BUMP in
              major)
                echo "new_version=$((major + 1)).0.0" >> $GITHUB_OUTPUT
                ;;
              minor)
                echo "new_version=$major.$((minor + 1)).0" >> $GITHUB_OUTPUT
                ;;
              patch)
                echo "new_version=$major.$minor.$((patch + 1))" >> $GITHUB_OUTPUT
                ;;
            esac
          fi

      - name: Update version in files
        if: steps.bump_version.outputs.bump != 'none'
        run: |
          # Update version in setup.py
          sed -i "s/version=\".*\"/version=\"${{ steps.new_version.outputs.new_version }}\"/" setup.py

          # Update version in __init__.py
          sed -i "s/__version__ = \".*\"/__version__ = \"${{ steps.new_version.outputs.new_version }}\"/" crules/crules/__init__.py

          # Commit the changes
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git add setup.py crules/crules/__init__.py
          git commit -m "chore: bump version to ${{ steps.new_version.outputs.new_version }}"
          git push

      - name: Create Release
        if: steps.bump_version.outputs.bump != 'none'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.new_version.outputs.new_version }}
          name: Release v${{ steps.new_version.outputs.new_version }}
          body: |
            ## What's Changed

            ${{ steps.bump_version.outputs.bump }} version bump

            ### Commits
            $(git log --format="- %s" v${{ steps.get_version.outputs.current_version }}..HEAD)
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
